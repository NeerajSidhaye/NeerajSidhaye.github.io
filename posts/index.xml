<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Posts on Neeraj Sidhaye</title>
    <link>https://neerajsidhaye.github.io/posts/</link>
    <description>Recent content in Posts on Neeraj Sidhaye</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>BeTheCodeWithYou@gmail.com ({Neeraj:Sidhaye})</managingEditor>
    <webMaster>BeTheCodeWithYou@gmail.com ({Neeraj:Sidhaye})</webMaster>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    <lastBuildDate>Sun, 14 Feb 2021 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://neerajsidhaye.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    

      
      <item>
        <title>Go - Building API</title>
        <link>https://neerajsidhaye.github.io/posts/go/api/gorestapi/</link>
        <pubDate>Sun, 14 Feb 2021 00:00:00 +0000</pubDate>
        <author>BeTheCodeWithYou@gmail.com ({Neeraj:Sidhaye})</author>
        <atom:modified>Sun, 14 Feb 2021 00:00:00 +0000</atom:modified>
        <guid>https://neerajsidhaye.github.io/posts/go/api/gorestapi/</guid>
        <description>In this post, I will try to put together notes around GO service and REST API.
 The complete source code is available on my github repo.I have created 3 branches, each branch representing different flavour of writing service.
GO api source code
Ok, let&amp;rsquo;s go ahead&amp;hellip;
GO - WebService GO package net/http does the job for us. It stars the sever and ready to receive request at /hello with http.</description>
        
        <dc:creator>Neeraj Sidhaye</dc:creator>
        <media:content url="https://neerajsidhaye.github.io//images/posts/go/api/gorestapi.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>GO</category>
            
          
            
              <category>REST API</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Microservices - Design Principle</title>
        <link>https://neerajsidhaye.github.io/posts/api/designprinciple/</link>
        <pubDate>Thu, 11 Feb 2021 00:00:00 +0000</pubDate>
        <author>BeTheCodeWithYou@gmail.com ({Neeraj:Sidhaye})</author>
        <atom:modified>Thu, 11 Feb 2021 00:00:00 +0000</atom:modified>
        <guid>https://neerajsidhaye.github.io/posts/api/designprinciple/</guid>
        <description>I have put together my notes around some of the basic microservices design principles which we must always consider while designing a microservice.
Design principles for MicroServices 1. Develop and Deployed independently Each service should be developed and deployed independently. Deployment of one service should not impact other services and a each service should have it&amp;rsquo;s own code base.
You are doing wrong if
 You find a need to deploy services together You have one code base for multiple services You need to send notification to before you deploy a service  2.</description>
        
        <dc:creator>Neeraj Sidhaye</dc:creator>
        <media:content url="https://neerajsidhaye.github.io//images/posts/api/microservices.jpeg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>API Design</category>
            
          
            
              <category>MicroServices</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Server Sent Events - Concepts</title>
        <link>https://neerajsidhaye.github.io/posts/sse/sse/</link>
        <pubDate>Sun, 07 Feb 2021 00:00:00 +0000</pubDate>
        <author>BeTheCodeWithYou@gmail.com ({Neeraj:Sidhaye})</author>
        <atom:modified>Sun, 07 Feb 2021 00:00:00 +0000</atom:modified>
        <guid>https://neerajsidhaye.github.io/posts/sse/sse/</guid>
        <description>This post describes basics of
 SSE concepts SSE use cases How does SSE work Message Formats SSE code on Client side and Server side SseEmitter connection keep alive time Auto Re-connect mechanism  SSE Concepts  Server Sent Events are the events ( data ) sent from server to the client over HTTP connection.
This connection is one directional connection from server to client. Meaning that, once the client connects to server, then there after server will send any real-time notifications generated on the server side, to the client.</description>
        
        <dc:creator>Neeraj Sidhaye</dc:creator>
        <media:content url="https://neerajsidhaye.github.io//images/posts/sse/what-are-server-sent-events-sse.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>Server Sent Events</category>
            
          
            
              <category>SSE</category>
            
          
            
              <category>EventSource</category>
            
          
        
        
        
      </item>
      

    
  </channel>
</rss>