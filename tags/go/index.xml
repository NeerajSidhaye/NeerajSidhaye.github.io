<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>GO on Neeraj Sidhaye</title>
    <link>https://neerajsidhaye.com/tags/go/</link>
    <description>Recent content in GO on Neeraj Sidhaye</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    <lastBuildDate>Sun, 14 Mar 2021 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://neerajsidhaye.com/tags/go/index.xml" rel="self" type="application/rss+xml" />
    

      
      <item>
        <title>gosec - GO security scanner and gosec integration with SonarCloud</title>
        <link>https://neerajsidhaye.com/posts/go/security/goappsecuritychecker/</link>
        <pubDate>Sun, 14 Mar 2021 00:00:00 +0000</pubDate>
        
        <atom:modified>Sun, 14 Mar 2021 00:00:00 +0000</atom:modified>
        <guid>https://neerajsidhaye.com/posts/go/security/goappsecuritychecker/</guid>
        <description>In this post, we will scan GO application code for security issues using gosec and will also integrate gosec with SonarCloud.
We will explore below topics
 What is gosec?
  Installing gosec
  Running security checks for a GO code
  Analyzing gosec reports
  SonarCloud Integration with gosec
  Companies using gosec
 What is gosec? gosec is a static code analyzer tool for inspecting go application code for security problems.</description>
        
        <dc:creator>Neeraj Sidhaye</dc:creator>
        <media:content url="https://neerajsidhaye.com/images/posts/go/security/gosecuritychecker.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>GO</category>
            
          
            
              <category>Security</category>
            
          
            
              <category>SonarCloud</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Dockerizing GO applications</title>
        <link>https://neerajsidhaye.com/posts/go/docker/dockerizegoapp/</link>
        <pubDate>Sun, 21 Feb 2021 00:00:00 +0000</pubDate>
        
        <atom:modified>Sun, 21 Feb 2021 00:00:00 +0000</atom:modified>
        <guid>https://neerajsidhaye.com/posts/go/docker/dockerizegoapp/</guid>
        <description>In this post, we will be creating an optimized docker image for GO application using multi stage build - using alpine image and then produce a small image with only binary in a scratch image. Let&amp;rsquo;s read further&amp;hellip;
Assuming that you have got docker, git and GO installed on your machine so that you can build your GO app locally and then create a docker image.
Multi Stage Build We will be creating a multi stage build.</description>
        
        <dc:creator>Neeraj Sidhaye</dc:creator>
        <media:content url="https://neerajsidhaye.com/images/posts/go/docker/dockerizegoapp.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>GO</category>
            
          
            
              <category>Docker</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Go - Building API</title>
        <link>https://neerajsidhaye.com/posts/go/api/gorestapi/</link>
        <pubDate>Sun, 14 Feb 2021 00:00:00 +0000</pubDate>
        
        <atom:modified>Sun, 14 Feb 2021 00:00:00 +0000</atom:modified>
        <guid>https://neerajsidhaye.com/posts/go/api/gorestapi/</guid>
        <description>In this post, I will try to put together notes around GO service and REST API.
 The complete source code is available on my github repo.I have created 3 branches, each branch representing different flavour of writing service.
GO api source code
Ok, let&amp;rsquo;s go ahead&amp;hellip;
GO - WebService GO package net/http does the job for us. It stars the sever and ready to receive request at /hello with http.</description>
        
        <dc:creator>Neeraj Sidhaye</dc:creator>
        <media:content url="https://neerajsidhaye.com/images/posts/go/api/gorestapi.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>GO</category>
            
          
            
              <category>REST API</category>
            
          
        
        
        
      </item>
      

    
  </channel>
</rss>